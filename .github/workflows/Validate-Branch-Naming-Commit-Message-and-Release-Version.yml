name: Validate Branch Naming, Commit Message, and Release Version

on:
  push:
    branches:
      - '**'   # 모든 브랜치에 대한 푸시를 감시
  pull_request:
    branches:
      - '**'   # 모든 브랜치에 대한 PR을 감시

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
        # 전체 커밋 히스토리를 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

        # 브랜치 이름 검사
      - name: Validate branch naming
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "develop" ]]; then
            echo "Skipping branch name validation for 'main' or 'develop' branch."
          elif [[ ! "$BRANCH_NAME" =~ ^(feature|release|hotfix)\/[a-zA-Z0-9_-]+$ ]]; then
            echo "❌ Branch name '$BRANCH_NAME' does not follow the naming convention."
            exit 1
          fi
          if [[ "$BRANCH_NAME" =~ [^a-zA-Z0-9_/-] ]]; then
            echo "❌ Branch name '$BRANCH_NAME' contains invalid characters."
            exit 1
          fi
          echo "✅ Branch name '$BRANCH_NAME' is valid."

        # 커밋 메시지 검사
      - name: Validate commit messages
        run: |
          COMMITS=$(git rev-list origin/${{ github.ref }}..HEAD)
          for COMMIT in $COMMITS; do
            MESSAGE=$(git log --format=%B -n 1 $COMMIT)
            if [[ ! "$MESSAGE" =~ ^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert):\ .+ ]]; then
              echo "❌ Commit message '$MESSAGE' does not follow the convention."
              exit 1
            fi
          done
          echo "✅ All commit messages are valid."

        # 릴리즈 버전 검사
      - name: Validate release commit message format
        run: |
          RELEASE_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          if [[ ! "$RELEASE_COMMIT_MESSAGE" =~ ^release:\ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "❌ Commit message does not follow the release format 'release: vMAJOR.MINOR.PATCH'."
            exit 1
          fi

          # Extract version number from commit message
          NEW_VERSION=$(echo "$RELEASE_COMMIT_MESSAGE" | sed -n 's/^release: v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')

          echo "Detected new version: $NEW_VERSION"

          # Get the latest release commit from the history
          LATEST_VERSION=$(git log --grep="^release: v" --pretty=%B | sed -n 's/^release: v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' | sort -V | tail -n 1)

          if [ -z "$LATEST_VERSION" ]; then
            echo "✅ No previous release found, this is the first release."
          else
            echo "Latest release version: $LATEST_VERSION"

            if [ "$(printf '%s\n' "$NEW_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ]; then
              echo "✅ New version '$NEW_VERSION' is greater than the latest version '$LATEST_VERSION'."
            else
              echo "❌ New version '$NEW_VERSION' must be greater than the latest version '$LATEST_VERSION'."
              exit 1
            fi
          fi
          echo "✅ Release commit message is valid and version is greater than the previous version."
